<div id='video-row'>
  <div id='video-frame'>
    <!-- <div id='video-border' style=' background-color: black; border: solid 5px white; width: 650px; height: 490px; margin: auto; border-radius: 5px;'> -->
      <video id="live" autoplay></video>
    <!-- </div> -->
  </div>
</div>

<div id='controls-row'>
  <div id='capture-frame'>    
    <a id='btn-camera' href="#"><%= image_tag 'camera.png' %></a>    
    <span id='count-label' />
  </div>
  <div id='next-frame'>
    <a id='form-submit' href='#'><%= image_tag 'next.png' %></a>
  </div>
</div>

<div class='hidden'>
  <canvas id='scratch'></canvas>
  <%= form_for @photo do |f| %>
    <%= f.hidden_field :content_base64 %>
    <%= f.hidden_field :content_type %>
    <%= f.hidden_field :content_filename %>
    <%= hidden_field_tag :redirect_to, frame_photo_url(@photo) %>
  <% end %>
</div>

<script>
var Photobooth = {
  settings: {
    countdownDelay: 3,
    contentType: "image/png",
    defaultFileName: "snapshot.png",    
  },

  init: function() {
    Photobooth.frame         = document.getElementById("video-frame");
    Photobooth.video         = document.getElementById("live");
    Photobooth.canvas        = document.getElementById("scratch");
    Photobooth.button        = document.getElementById('btn-camera');
    Photobooth.label         = document.getElementById('count-label');
    Photobooth.contentBase64 = document.getElementById('photo_content_base64');
    Photobooth.contentType   = document.getElementById('photo_content_type');
    Photobooth.contentName   = document.getElementById('photo_content_filename');    
    Photobooth.bindUI();
    Photobooth.checkWebRTC();
  },

  bindUI: function() {
    Photobooth.button.addEventListener("click", Photobooth.startCountdown);
  },

  checkWebRTC: function() {
    navigator.getUserMedia = ( navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
    if (navigator.getUserMedia) {
      navigator.getUserMedia({video: true, audio: false}, Photobooth.initCamera, Photobooth.logError);
    } else {
      $(Photobooth.frame).append("<h1><i class='fa fa-frown-o'></i><br/>getUserMedia not supported</h1>");
    }
  },

  logError: function(err) {
    console.log("The following error occured:");
    console.log(err);
  },

  initCamera: function(mediaStream) {
    Photobooth.video.src = window.URL.createObjectURL(mediaStream);
    Photobooth.video.addEventListener("playing", Photobooth.enableControls);
  },

  enableControls: function() {
    $(Photobooth.video).fadeIn(function() {
      $("#controls").fadeIn();
    });
  },

  startCountdown: function(e) {
    e.preventDefault();
    Photobooth.clearPreviousPhoto();
    $(Photobooth.button).fadeOut(function() {
      $(Photobooth.label).show();
      $(Photobooth.label).text("Ready?");
      console.log("Ready!");
    });
    Photobooth.currentCount = Photobooth.settings.countdownDelay;
    Photobooth.countdownInterval = setInterval(Photobooth.processCountdown, 1000);
  },

  clearPreviousPhoto: function() {
    if($(Photobooth.video).hasClass("hidden")) {
      $(Photobooth.frame).children("img").fadeOut(function() {
        $(Photobooth.video).removeClass("hidden");  
        $(Photobooth.frame).children("img").remove();
        $(Photobooth.frame).fadeIn();        
      });
    }
  },

  processCountdown: function() {
    if(Photobooth.currentCount === 0) {
      Photobooth.takePhoto();
      Photobooth.stopCountdown();
    } else {
      $(Photobooth.label).text(Photobooth.currentCount);
      Photobooth.currentCount -= 1;
    }
  },

  stopCountdown: function() {
    clearInterval(Photobooth.countdownInterval);
    $(Photobooth.label).hide();
    $(Photobooth.label).text('');
    $(Photobooth.button).fadeIn();
  },

  flash: function() {
    $(Photobooth.video).fadeOut('fast', function() {
      $(Photobooth.video).fadeIn();
    });
  },

  takePhoto: function() {
    Photobooth.flash();

    Photobooth.canvas.width  = 640;
    Photobooth.canvas.height = 480;

    var c = Photobooth.canvas.getContext("2d");
    c.drawImage(Photobooth.video, 0, 0, Photobooth.canvas.width, Photobooth.canvas.height);

    Photobooth.processPhoto();
  },

  processPhoto: function() {
    var img = document.createElement("img");
    img.src    = Photobooth.canvas.toDataURL(Photobooth.settings.contentType);
    img.width  = Photobooth.canvas.width;
    img.height = Photobooth.canvas.height;

    Photobooth.saveToForm();

    $(Photobooth.video).fadeOut(function() {
      $(Photobooth.video).addClass("hidden");  
      $(Photobooth.frame).append(img);
      $(Photobooth.frame).fadeIn();
    });
  },

  saveToForm: function() {
    Photobooth.contentBase64.value = Photobooth.canvas.toDataURL(Photobooth.settings.contentType);
    Photobooth.contentType.value   = Photobooth.settings.contentType;
    Photobooth.contentName.value   = Photobooth.settings.defaultFileName;
  },  
};

var CaptureForm = {
  init: function() {
    CaptureForm.form   = document.getElementsByClassName('edit_photo')[0];
    CaptureForm.submit = document.getElementById('form-submit');
    CaptureForm.bindUI();
  },
  bindUI: function() {
    $(CaptureForm.submit).click(CaptureForm.submitForm);
  },
  submitForm: function(e) {
    e.preventDefault();
    console.log("Hallo?");
    //if($(CaptureForm.form).valid() === true) {
      CaptureForm.form.submit();
    //}
  },
};

Photobooth.init();
CaptureForm.init();
</script>